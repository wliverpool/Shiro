[main]
#登陆验证的url
authc.loginUrl=/login
#角色未授时跳转的url
roles.unauthorizedUrl=/visitDenied
#权限未授时跳转的url
perms.unauthorizedUrl=/visitDenied
#退出重定向url
logout.redirectUrl=/login
credentialsMatcher=com.shiro.realm.RetryLimitHashedCredentialsMatcher

#自定义realm 一定要放在securityManager.authorizer赋值之后（因为调用setRealms会将realms设置给authorizer，并给各个Realm设置permissionResolver和rolePermissionResolver）
userRealm=com.shiro.realm.UserCustomJdbcRealm
userRealm.credentialsMatcher=$credentialsMatcher
#配置real缓存
userRealm.cachingEnabled=true
#缓存验证信息
userRealm.authenticationCachingEnabled=true
userRealm.authenticationCacheName=authenticationCache
#缓存授权信息
userRealm.authorizationCachingEnabled=true
userRealm.authorizationCacheName=authorizationCache
securityManager.realms=$userRealm

#测试需要正常上生产不需要改EhCacheManager,只需要设置ehcache的配置文件
cacheManager=org.apache.shiro.cache.ehcache.EhCacheManager
cacheManager.cacheManagerConfigFile=classpath:shiro-ehcache.xml
securityManager.cacheManager=$cacheManager

[urls]
#匿名访问的url
#访问的url对应处理的filter的名字,DefaultFilter枚举总共有11个filter默认都会加载
#anon(AnonymousFilter.class),authc(FormAuthenticationFilter.class),
#authcBasic(BasicHttpAuthenticationFilter.class),logout(LogoutFilter.class),
#noSessionCreation(NoSessionCreationFilter.class),perms(PermissionsAuthorizationFilter.class),
#port(PortFilter.class),rest(HttpMethodPermissionFilter.class),
#roles(RolesAuthorizationFilter.class),ssl(SslFilter.class),user(UserFilter.class);
/login=anon
/logout=anon
/notneedauthorized=anon
/static/**=anon
#需要通过身份验证才能访问的url
/authenticated=authc
#需要通过身份验证并且具有admin角色才能访问的url
/role=authc,roles[admin]
#需要通过身份验证并且具有user:create权限才能访问的url
/permission=authc,perms["user:create"]